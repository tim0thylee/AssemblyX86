     1                                  ; #Author: Timothy Lee
     2                                  ; #Class: CSPC240-03
     3                                  ; #Email: timothylee43@csu.fullerton.edu
     4                                  ; #Program name: Midterm 2 - Harmonic
     5                                  ;===== Begin code area =====================================================================================================================================================
     6                                  extern printf
     7                                  
     8                                  extern scanf
     9                                  
    10                                  extern fgets
    11                                  
    12                                  extern stdin
    13                                  
    14                                  extern strlen
    15                                  
    16                                  extern atof
    17                                  
    18                                  extern isfloat
    19                                  
    20                                  extern reciprocal_sum
    21                                  
    22                                  global harmonic
    23                                  
    24                                  one_half equ 0x3FE0000000000000
    25                                  
    26                                  segment .data
    27                                  
    28                                  align 16
    29                                  
    30 00000000 57652077696C6C2066-     greeting_message db "We will find your harmonic sum.", 10, 0
    30 00000009 696E6420796F757220-
    30 00000012 6861726D6F6E696320-
    30 0000001B 73756D2E0A00       
    31                                  
    32 00000021 506C6561736520656E-     number_message db "Please enter how many numbers are in the set: ", 0
    32 0000002A 74657220686F77206D-
    32 00000033 616E79206E756D6265-
    32 0000003C 72732061726520696E-
    32 00000045 20746865207365743A-
    32 0000004E 2000               
    33                                  
    34 00000050 456E74657220796F75-     list_of_floats_message db "Enter your numbers one at a time separated by white space.",10, 0
    34 00000059 72206E756D62657273-
    34 00000062 206F6E652061742061-
    34 0000006B 2074696D6520736570-
    34 00000074 617261746564206279-
    34 0000007D 207768697465207370-
    34 00000086 6163652E0A00       
    35                                  
    36 0000008C 5468652073756D206F-     sum_of_harmonics_message db "The sum of the harmonic sum of these numbers is %lf", 10, 0
    36 00000095 662074686520686172-
    36 0000009E 6D6F6E69632073756D-
    36 000000A7 206F66207468657365-
    36 000000B0 206E756D6265727320-
    36 000000B9 697320256C660A00   
    37                                  
    38 000000C1 546865207265636970-     reciprocal_sum_message db "The reciprocal of the sum is %lf. Have a nice day.", 10, 0
    38 000000CA 726F63616C206F6620-
    38 000000D3 7468652073756D2069-
    38 000000DC 7320256C662E204861-
    38 000000E5 76652061206E696365-
    38 000000EE 206461792E0A00     
    39                                  
    40 000000F5 496E76616C69642069-     invalid_float db "Invalid input detected.  You may run this program again.", 10, 0
    40 000000FE 6E7075742064657465-
    40 00000107 637465642E2020596F-
    40 00000110 75206D61792072756E-
    40 00000119 20746869732070726F-
    40 00000122 6772616D2061676169-
    40 0000012B 6E2E0A00           
    41                                  
    42 0000012F 54686520666C6F6174-     input_invalid_message db "The floating point number 1.0 will be returned to the driver.", 10, 0
    42 00000138 696E6720706F696E74-
    42 00000141 206E756D6265722031-
    42 0000014A 2E302077696C6C2062-
    42 00000153 652072657475726E65-
    42 0000015C 6420746F2074686520-
    42 00000165 6472697665722E0A00 
    43                                  
    44 0000016E 546865207265636970-     final_message db "The reciprocal of sums will be returned to the driver.", 10, 0
    44 00000177 726F63616C206F6620-
    44 00000180 73756D732077696C6C-
    44 00000189 206265207265747572-
    44 00000192 6E656420746F207468-
    44 0000019B 65206472697665722E-
    44 000001A4 0A00               
    45                                  
    46 000001A6 257300                  stringformat db "%s", 0
    47                                  
    48 000001A9 256C6600                eight_byte_format db "%lf", 0                               ;general 8-byte float format
    49                                  
    50 000001AD 256C6400                int_format db "%ld", 0
    51                                  
    52 000001B1 546865206C656E6774-     hypo_message db "The length of the hypotenuse is %lf.", 10, 0
    52 000001BA 68206F662074686520-
    52 000001C3 6879706F74656E7573-
    52 000001CC 6520697320256C662E-
    52 000001D5 0A00               
    53                                  
    54                                  ;testing purposes
    55 000001D7 546865206F6E65206E-     output_one_float db "The one number is %5.3lf.",10,0
    55 000001E0 756D62657220697320-
    55 000001E9 25352E336C662E0A00 
    56 000001F2 5468652074776F206E-     output_two_float db "The two numbers are %5.3lf and %5.3lf.",10,0
    56 000001FB 756D62657273206172-
    56 00000204 652025352E336C6620-
    56 0000020D 616E642025352E336C-
    56 00000216 662E0A00           
    57 0000021A 546865207468726565-     output_three_float db "The three numbers are %5.3lf and %5.3lf and %5.3lf",10,0
    57 00000223 206E756D6265727320-
    57 0000022C 6172652025352E336C-
    57 00000235 6620616E642025352E-
    57 0000023E 336C6620616E642025-
    57 00000247 352E336C660A00     
    58                                  
    59 0000024E 90<rept>                align 64
    60                                  
    61                                  segment .bss
    62                                  
    63 00000000 <res 00000020>          name0 resb 32
    64 00000020 <res 00000020>          element resb 32
    65 00000040 <res 00000020>          current resb 32
    66                                  
    67                                  segment .text
    68                                  
    69                                  harmonic:
    70                                  
    71 00000000 55                      push rbp                                              ;This marks the start of a new stack frame belonging to this execution of this function.
    72 00000001 4889E5                  mov  rbp, rsp                                         ;rbp holds the address of the start of this new stack frame.  When this function returns to its caller rbp must
    73 00000004 53                      push rbx
    74 00000005 51                      push rcx
    75 00000006 52                      push rdx
    76 00000007 57                      push rdi
    77 00000008 56                      push rsi
    78 00000009 4150                    push r8
    79 0000000B 4151                    push r9
    80 0000000D 4152                    push r10
    81 0000000F 4153                    push r11
    82 00000011 4154                    push r12
    83 00000013 4155                    push r13
    84 00000015 4156                    push r14
    85 00000017 4157                    push r15
    86 00000019 9C                      pushf
    87                                  
    88                                  
    89                                  ;=========== Prompt for programmer's numbers in the set =================================================================================================================================
    90 0000001A B800000000              mov qword rax, 0
    91 0000001F 48BF-                   mov rdi, stringformat
    91 00000021 [A601000000000000] 
    92 00000029 48BE-                   mov rsi, greeting_message
    92 0000002B [0000000000000000] 
    93 00000033 E8(00000000)            call printf
    94                                  
    95 00000038 B800000000              mov qword rax, 0
    96 0000003D 48BF-                   mov rdi, stringformat
    96 0000003F [A601000000000000] 
    97 00000047 48BE-                   mov rsi, number_message
    97 00000049 [2100000000000000] 
    98 00000051 E8(00000000)            call printf
    99                                  
   100                                  ;retrieve a int from the user
   101 00000056 B800000000              mov qword rax, 0
   102 0000005B 48BF-                   mov rdi, int_format
   102 0000005D [AD01000000000000] 
   103 00000065 4889E6                  mov rsi, rsp
   104 00000068 E8(00000000)            call scanf
   105 0000006D 4C8B2424                mov r12, [rsp] ;store into r12, where it will keep the total
   106 00000071 4D89E5                  mov r13, r12; this will be the loop, where we decrement by 1 per loop
   107                                  
   108                                  ; ;debugging code to check if int is stored
   109                                  ; mov qword rax, 0
   110                                  ; mov rdi, int_format
   111                                  ; mov rsi, r12
   112                                  ; call printf
   113                                  
   114                                  ;=========== Ask the user for the floats =================================================================================================================================
   115                                  
   116                                  ;store 0.0 into xmm15, as xmm15 will hold the total harmonic sum
   117 00000074 B800000000              mov rax, 0
   118 00000079 F24C0F2AF8              cvtsi2sd xmm15, rax
   119                                  
   120 0000007E B800000000              mov qword rax, 0
   121 00000083 48BF-                   mov rdi, stringformat
   121 00000085 [A601000000000000] 
   122 0000008D 48BE-                   mov rsi, list_of_floats_message
   122 0000008F [5000000000000000] 
   123 00000097 E8(00000000)            call printf
   124                                  
   125                                  ;=========== Create loop to ask user for multiple inputs and validate=================================================================================================================================
   126                                  ;we want to loop here
   127                                  continue_loop:
   128                                  
   129                                  ;if equal to 0, jump to loop_complete, else, continue on.
   130 0000009C 4983FD00                cmp r13, 0
   131 000000A0 7471                    je loop_complete
   132 000000A2 49FFCD                  dec r13
   133                                  
   134                                  ;Use scanf for element because we dont want any whitespace
   135 000000A5 B800000000              mov qword rax, 0
   136 000000AA 48BF-                   mov rdi, stringformat
   136 000000AC [A601000000000000] 
   137 000000B4 48BE-                   mov rsi, element
   137 000000B6 [2000000000000000] 
   138 000000BE E8(00000000)            call scanf
   139                                  
   140                                  ;Check if the string element is actually a valid float
   141 000000C3 B800000000              mov qword rax, 0
   142 000000C8 48BF-                   mov rdi, element
   142 000000CA [2000000000000000] 
   143 000000D2 E8(00000000)            call isfloat
   144                                  
   145                                  ;If the isfloat returns 0, we want to skip to error_input
   146 000000D7 4989C2                  mov r10, rax
   147 000000DA 4983FA00                cmp r10, 0
   148 000000DE 0F8481000000            je error_input
   149                                  
   150                                  ;=========== Convert to float and add to haronmic sum=================================================================================================================================
   151                                  ;We now convert the element into a float using atof. Store in xmm14
   152 000000E4 B801000000              mov rax, 1
   153 000000E9 48BF-                   mov rdi, element
   153 000000EB [2000000000000000] 
   154 000000F3 E8(00000000)            call atof
   155 000000F8 F2440F10F0              movsd xmm14, xmm0
   156                                  
   157                                  ;We want to store a 1.0 into xmm13
   158 000000FD B801000000              mov rax, 1
   159 00000102 F24C0F2AE8              cvtsi2sd xmm13, rax
   160                                  
   161                                  ;Now find the reciprocal and store into xmm13
   162 00000107 F2450F5EEE              divsd xmm13, xmm14
   163 0000010C F2450F58FD              addsd xmm15, xmm13
   164                                  
   165                                  ;continue on the loop
   166 00000111 EB89                    jmp continue_loop
   167                                  
   168                                  loop_complete:
   169                                  
   170 00000113 B801000000              mov qword rax, 1
   171 00000118 48BF-                   mov rdi, sum_of_harmonics_message
   171 0000011A [8C00000000000000] 
   172 00000122 F2410F10C7              movsd xmm0, xmm15
   173 00000127 E8(00000000)            call printf
   174                                  
   175                                  ;call the reciprocal_sum cpp function
   176 0000012C B801000000              mov qword rax, 1
   177 00000131 F2410F10C7              movsd xmm0, xmm15
   178 00000136 E8(00000000)            call reciprocal_sum
   179                                  
   180                                  ;store reciprocal sum into xmm15
   181 0000013B F2440F10F8              movsd xmm15, xmm0
   182                                  
   183 00000140 B800000000              mov rax, 0
   184 00000145 48BF-                   mov rdi, stringformat
   184 00000147 [A601000000000000] 
   185 0000014F 48BE-                   mov rsi, final_message
   185 00000151 [6E01000000000000] 
   186 00000159 E8(00000000)            call printf
   187                                  
   188 0000015E F2410F10C7              movsd xmm0, xmm15
   189                                  
   190 00000163 EB4B                    jmp end_program
   191                                  
   192                                  ;=========== Invalid float block=================================================================================================================================
   193                                  error_input:
   194 00000165 B800000000              mov qword rax, 0
   195 0000016A 48BF-                   mov rdi, stringformat
   195 0000016C [A601000000000000] 
   196 00000174 48BE-                   mov rsi, invalid_float
   196 00000176 [F500000000000000] 
   197 0000017E E8(00000000)            call printf
   198                                  
   199 00000183 B800000000              mov qword rax, 0
   200 00000188 48BF-                   mov rdi, stringformat
   200 0000018A [A601000000000000] 
   201 00000192 48BE-                   mov rsi, input_invalid_message
   201 00000194 [2F01000000000000] 
   202 0000019C E8(00000000)            call printf
   203                                  
   204                                  ;Send 1.0 to the program in this case
   205 000001A1 B801000000              mov rax, 1
   206 000001A6 F24C0F2AE8              cvtsi2sd xmm13, rax
   207 000001AB F2410F10C5              movsd xmm0, xmm13
   208                                  
   209                                  end_program:
   210 000001B0 9D                      popf
   211 000001B1 415F                    pop r15
   212 000001B3 415E                    pop r14
   213 000001B5 415D                    pop r13
   214 000001B7 415C                    pop r12
   215 000001B9 415B                    pop r11
   216 000001BB 415A                    pop r10
   217 000001BD 4159                    pop r9
   218 000001BF 4158                    pop r8
   219 000001C1 5E                      pop rsi
   220 000001C2 5F                      pop rdi
   221 000001C3 5A                      pop rdx
   222 000001C4 59                      pop rcx
   223 000001C5 5B                      pop rbx
   224 000001C6 5D                      pop rbp               ;Restore the base pointer of the stack frame of the caller.
   225                                  
   226 000001C7 C3                      ret
