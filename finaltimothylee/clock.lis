     1                                  ; // Name: Timothy Lee
     2                                  ; // Email: timothylee43@csu.fullerton.edu
     3                                  ; // Final Exam Section Section 3
     4                                  ;===== Begin code area =====================================================================================================================================================
     5                                  extern printf
     6                                  
     7                                  extern scanf
     8                                  
     9                                  extern fgets
    10                                  
    11                                  extern clock_speed
    12                                  
    13                                  global clock_exec
    14                                  
    15                                  one_half equ 0x3FE0000000000000
    16                                  
    17                                  gravity equ 0x4023999999999999
    18                                  
    19                                  segment .data
    20                                  
    21                                  align 16
    22                                  
    23 00000000 57656C636F6D652074-     welcome_message db "Welcome to the Timothy Lee Braking Program", 10, 0
    23 00000009 6F207468652054696D-
    23 00000012 6F746879204C656520-
    23 0000001B 4272616B696E672050-
    23 00000024 726F6772616D0A00   
    24                                  
    25 0000002C 546865206672657175-     current_speed_message db "The frequency (GHz) of the processor machine is %lf.", 10, 0
    25 00000035 656E6379202847487A-
    25 0000003E 29206F662074686520-
    25 00000047 70726F636573736F72-
    25 00000050 206D616368696E6520-
    25 00000059 697320256C662E0A00 
    26                                  
    27 00000062 546865206375727265-     current_clock_message db "The current clock time is %ld tics.", 10, 0
    27 0000006B 6E7420636C6F636B20-
    27 00000074 74696D652069732025-
    27 0000007D 6C6420746963732E0A-
    27 00000086 00                 
    28                                  
    29 00000087 506C6561736520656E-     mass_message db "Please enter the mass of moving vehicle (Kg): ", 0
    29 00000090 74657220746865206D-
    29 00000099 617373206F66206D6F-
    29 000000A2 76696E672076656869-
    29 000000AB 636C6520284B67293A-
    29 000000B4 2000               
    30                                  
    31 000000B6 506C6561736520656E-     velocity_message db "Please enter the velocity of the vehicle (meters per second): ", 0
    31 000000BF 746572207468652076-
    31 000000C8 656C6F63697479206F-
    31 000000D1 662074686520766568-
    31 000000DA 69636C6520286D6574-
    31 000000E3 657273207065722073-
    31 000000EC 65636F6E64293A2000 
    32                                  
    33 000000F5 506C6561736520656E-     distance_message db "Please enter the distance (meters) required for a complete stop: ", 0
    33 000000FE 746572207468652064-
    33 00000107 697374616E63652028-
    33 00000110 6D6574657273292072-
    33 00000119 657175697265642066-
    33 00000122 6F72206120636F6D70-
    33 0000012B 6C6574652073746F70-
    33 00000134 3A2000             
    34                                  
    35 00000137 546865206578656375-     tics_time_message db "The execution time was %ld tics which equals to %lf ns", 10, 0
    35 00000140 74696F6E2074696D65-
    35 00000149 2077617320256C6420-
    35 00000152 746963732077686963-
    35 0000015B 6820657175616C7320-
    35 00000164 746F20256C66206E73-
    35 0000016D 0A00               
    36                                  
    37 0000016F 546865207265717569-     force_message db "The required braking force is %lf Newtons", 10, 0
    37 00000178 726564206272616B69-
    37 00000181 6E6720666F72636520-
    37 0000018A 697320256C66204E65-
    37 00000193 77746F6E730A00     
    38                                  
    39 0000019A 54686520636F6D7075-     computation_message db "The compuation required %ld or %lf nanoseconds", 10, 0
    39 000001A3 6174696F6E20726571-
    39 000001AC 756972656420256C64-
    39 000001B5 206F7220256C66206E-
    39 000001BE 616E6F7365636F6E64-
    39 000001C7 730A00             
    40                                  
    41 000001CA 257300                  stringformat db "%s", 0
    42                                  
    43 000001CD 256C6600                eight_byte_format db "%lf", 0                               ;general 8-byte float format
    44                                  
    45 000001D1 256400                  int_format db "%d", 0 ;debugging purposes
    46                                  
    47 000001D4 90<rept>                align 64
    48                                  
    49                                  segment .bss
    50                                  
    51 00000000 <res 00000020>          name0 resb 32
    52 00000020 <res 00000020>          resistance resb 32
    53 00000040 <res 00000020>          current resb 32
    54                                  
    55                                  segment .text
    56                                  
    57                                  clock_exec:
    58                                  
    59 00000000 55                      push rbp                                              ;This marks the start of a new stack frame belonging to this execution of this function.
    60 00000001 4889E5                  mov  rbp, rsp                                         ;rbp holds the address of the start of this new stack frame.  When this function returns to its caller rbp must
    61 00000004 53                      push rbx
    62 00000005 51                      push rcx
    63 00000006 52                      push rdx
    64 00000007 57                      push rdi
    65 00000008 56                      push rsi
    66 00000009 4150                    push r8
    67 0000000B 4151                    push r9
    68 0000000D 4152                    push r10
    69 0000000F 4153                    push r11
    70 00000011 4154                    push r12
    71 00000013 4155                    push r13
    72 00000015 4156                    push r14
    73 00000017 4157                    push r15
    74 00000019 9C                      pushf
    75                                  
    76                                  ;=========== Greet user and print out clockspeed================================================================================================================================
    77 0000001A B800000000              mov rax, 0
    78 0000001F 48BF-                   mov rdi, stringformat
    78 00000021 [CA01000000000000] 
    79 00000029 48BE-                   mov rsi, welcome_message
    79 0000002B [0000000000000000] 
    80 00000033 E8(00000000)            call printf
    81                                  
    82 00000038 B801000000              mov rax, 1
    83 0000003D E8(00000000)            call clock_speed
    84 00000042 F2440F10F8              movsd xmm15, xmm0 ;store clock speed in xmm15
    85                                  
    86 00000047 B801000000              mov rax, 1
    87 0000004C 48BF-                   mov rdi, current_speed_message
    87 0000004E [2C00000000000000] 
    88 00000056 F2410F10C7              movsd xmm0, xmm15
    89 0000005B E8(00000000)            call printf
    90                                  
    91                                  ;=========== Ask user for mass, velocity, and distance ================================================================================================================================
    92 00000060 B800000000              mov rax, 0
    93 00000065 48BF-                   mov rdi, stringformat
    93 00000067 [CA01000000000000] 
    94 0000006F 48BE-                   mov rsi, mass_message
    94 00000071 [8700000000000000] 
    95 00000079 E8(00000000)            call printf
    96                                  
    97 0000007E 6A00                    push qword 0
    98 00000080 6AFF                    push qword -1
    99 00000082 B800000000              mov rax, 0
   100 00000087 48BF-                   mov rdi, eight_byte_format
   100 00000089 [CD01000000000000] 
   101 00000091 4889E6                  mov rsi, rsp
   102 00000094 E8(00000000)            call scanf
   103 00000099 F2440F102424            movsd xmm12, [rsp] ;store mass in xmm12
   104 0000009F 58                      pop rax
   105 000000A0 58                      pop rax
   106                                  
   107 000000A1 B800000000              mov rax, 0
   108 000000A6 48BF-                   mov rdi, stringformat
   108 000000A8 [CA01000000000000] 
   109 000000B0 48BE-                   mov rsi, velocity_message
   109 000000B2 [B600000000000000] 
   110 000000BA E8(00000000)            call printf
   111                                  
   112 000000BF 6A00                    push qword 0
   113 000000C1 6AFF                    push qword -1
   114 000000C3 B800000000              mov rax, 0
   115 000000C8 48BF-                   mov rdi, eight_byte_format
   115 000000CA [CD01000000000000] 
   116 000000D2 4889E6                  mov rsi, rsp
   117 000000D5 E8(00000000)            call scanf
   118 000000DA F2440F102C24            movsd xmm13, [rsp] ;store velocity in xmm13
   119 000000E0 58                      pop rax
   120 000000E1 58                      pop rax
   121                                  
   122 000000E2 B800000000              mov rax, 0
   123 000000E7 48BF-                   mov rdi, stringformat
   123 000000E9 [CA01000000000000] 
   124 000000F1 48BE-                   mov rsi, distance_message
   124 000000F3 [F500000000000000] 
   125 000000FB E8(00000000)            call printf
   126                                  
   127 00000100 6A00                    push qword 0
   128 00000102 6AFF                    push qword -1
   129 00000104 B800000000              mov rax, 0
   130 00000109 48BF-                   mov rdi, eight_byte_format
   130 0000010B [CD01000000000000] 
   131 00000113 4889E6                  mov rsi, rsp
   132 00000116 E8(00000000)            call scanf
   133 0000011B F2440F103424            movsd xmm14, [rsp] ;store distance in xmm14
   134 00000121 58                      pop rax
   135 00000122 58                      pop rax
   136                                  
   137                                  ;=========== Read the clock and save in r14 ================================================================================================================================
   138 00000123 B800000000              mov rax, 0
   139 00000128 BA00000000              mov rdx, 0
   140                                  
   141 0000012D 0FA2                    cpuid ;Identifies the type of cpu being used on pc.
   142 0000012F 0F31                    rdtsc ;Counts the number of cycles/tics occured since pc reset.
   143                                  
   144 00000131 48C1E220                shl rdx, 32 ;shift left 32
   145 00000135 4801D0                  add rax, rdx ;now add
   146 00000138 4989C6                  mov r14, rax ;store into r14
   147                                  
   148                                  ;=========== Calculate the force ================================================================================================================================
   149                                  
   150 0000013B 48BB000000000000E0-     mov rbx, one_half
   150 00000144 3F                 
   151 00000145 53                      push rbx ;push 0.5 on stack
   152 00000146 F2440F101424            movsd xmm10, [rsp] ;store 0.5 in xmm10
   153 0000014C F2450F59E2              mulsd xmm12, xmm10 ; 0.5 * m and store in xmm12
   154 00000151 F2450F59E5              mulsd xmm12, xmm13 ;0.5 * m * v and store in xmm12
   155 00000156 F2450F59E5              mulsd xmm12, xmm13 ;0.5 * m * v * v and store in xmm12
   156 0000015B F2450F5EE6              divsd xmm12, xmm14 ; divide xmm12 by d to get final force
   157 00000160 58                      pop rax
   158                                  
   159                                  ;=========== Read the clock and save in r15 ================================================================================================================================
   160 00000161 B800000000              mov rax, 0
   161 00000166 BA00000000              mov rdx, 0
   162                                  
   163 0000016B 0FA2                    cpuid ;Identifies the type of cpu being used on pc.
   164 0000016D 0F31                    rdtsc ;Counts the number of cycles/tics occured since pc reset.
   165                                  
   166 0000016F 48C1E220                shl rdx, 32 ;shift left 32
   167 00000173 4801D0                  add rax, rdx ;now add
   168 00000176 4989C7                  mov r15, rax ;store into r14
   169                                  
   170                                  ;=========== Print the force and computer clock difference and seconds ================================================================================================================================
   171 00000179 B801000000              mov rax, 1
   172 0000017E 48BF-                   mov rdi, force_message
   172 00000180 [6F01000000000000] 
   173 00000188 F2410F10C4              movsd xmm0, xmm12
   174 0000018D E8(00000000)            call printf
   175                                  
   176 00000192 4D29F7                  sub r15, r14 ;subtract the current tics to tics before calculation
   177 00000195 F24D0F2AEF              cvtsi2sd xmm13, r15 ;convert the subtracted tics into float
   178 0000019A F2450F5EEF              divsd xmm13, xmm15 ; divide the tics by the clock speed to get elapsed time
   179                                  
   180 0000019F B801000000              mov rax, 1
   181 000001A4 48BF-                   mov rdi, computation_message
   181 000001A6 [9A01000000000000] 
   182 000001AE 4C89FE                  mov rsi, r15
   183 000001B1 F2410F10C5              movsd xmm0, xmm13
   184 000001B6 E8(00000000)            call printf
   185                                  
   186 000001BB F2410F10C5              movsd xmm0, xmm13
   187                                  
   188 000001C0 9D                      popf
   189 000001C1 415F                    pop r15
   190 000001C3 415E                    pop r14
   191 000001C5 415D                    pop r13
   192 000001C7 415C                    pop r12
   193 000001C9 415B                    pop r11
   194 000001CB 415A                    pop r10
   195 000001CD 4159                    pop r9
   196 000001CF 4158                    pop r8
   197 000001D1 5E                      pop rsi
   198 000001D2 5F                      pop rdi
   199 000001D3 5A                      pop rdx
   200 000001D4 59                      pop rcx
   201 000001D5 5B                      pop rbx
   202 000001D6 5D                      pop rbp               ;Restore the base pointer of the stack frame of the caller.
   203                                  
   204 000001D7 C3                      ret
